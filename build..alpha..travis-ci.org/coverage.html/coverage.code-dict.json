{"/home/travis/build/npmtest/node-npmtest-shipit-deploy/test.js":"/* istanbul instrument in package npmtest_shipit_deploy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-shipit-deploy/lib.npmtest_shipit_deploy.js":"/* istanbul instrument in package npmtest_shipit_deploy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_shipit_deploy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_shipit_deploy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-shipit-deploy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-shipit-deploy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_shipit_deploy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_shipit_deploy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_shipit_deploy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_shipit_deploy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_shipit_deploy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_shipit_deploy.__dirname + '/lib.npmtest_shipit_deploy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-shipit-deploy/node_modules/shipit-deploy/index.js":"module.exports = function (shipit) {\n  require('./tasks/deploy')(shipit);\n  require('./tasks/rollback')(shipit);\n  require('./tasks/pending')(shipit);\n};\n","/home/travis/build/npmtest/node-npmtest-shipit-deploy/node_modules/shipit-deploy/lib/init.js":"var path = require('path2/posix');\nvar _ = require('lodash');\n\nmodule.exports = function(shipit) {\n  shipit.currentPath = path.join(shipit.config.deployTo, 'current');\n  shipit.releasesPath = path.join(shipit.config.deployTo, 'releases');\n  shipit.config.gitLogFormat = shipit.config.gitLogFormat || '%h: %s - %an';\n  _.assign(shipit.constructor.prototype, require('./shipit'));\n\n  return shipit;\n};\n","/home/travis/build/npmtest/node-npmtest-shipit-deploy/node_modules/shipit-deploy/lib/shipit.js":"var path = require('path2/posix');\nvar _ = require('lodash');\nvar util = require('util');\nvar Shipit = module.exports;\n\n/**\n * Compute the current release dir name.\n *\n * @param {object} result\n * @returns {string}\n */\n\nfunction computeReleases(result) {\n  if (!result.stdout) return null;\n\n  // Trim last breakline.\n  var dirs = result.stdout.replace(/\\n$/, '');\n\n  // Convert releases to an array.\n  return dirs.split('\\n');\n}\n\n/**\n * Test if all values are equal.\n *\n * @param {*[]} values\n * @returns {boolean}\n */\n\nfunction equalValues(values) {\n  return values.every(function (value) {\n    return _.isEqual(value, values[0]);\n  });\n}\n\n/**\n * Compute the current release dir name.\n *\n * @param {object} result\n * @returns {string}\n */\n\nfunction computeReleaseDirname(result) {\n  if (!result.stdout) return null;\n\n  // Trim last breakline.\n  var target = result.stdout.replace(/\\n$/, '');\n\n  return target.split(path.sep).pop();\n}\n\n/**\n * Return the current release dirname.\n */\n\nShipit.getCurrentReleaseDirname = function() {\n  var shipit = this;\n\n  return shipit.remote(util.format('if [ -h %s ]; then readlink %s; fi', shipit.currentPath, shipit.currentPath))\n  .then(function(results) {\n    results = results || [];\n    var releaseDirnames = results.map(computeReleaseDirname);\n\n    if (!equalValues(releaseDirnames)) {\n      throw new Error('Remote servers are not synced.');\n    }\n\n    if (!releaseDirnames[0]) {\n      shipit.log('No current release found.');\n      return null;\n    }\n\n    return releaseDirnames[0];\n  });\n};\n\n/**\n * Return all remote releases (newest first)\n */\n\nShipit.getReleases = function() {\n  var shipit = this;\n\n  return shipit.remote('ls -r1 ' + shipit.releasesPath)\n  .then(function(results) {\n    var releases = results.map(computeReleases);\n\n    if (!equalValues(releases))\n      throw new Error('Remote servers are not synced.');\n\n    return releases[0];\n  });\n};\n\n/**\n * Return SHA from remote REVISION file.\n *\n * @param {string} releaseDir Directory name of the relesase dir (YYYYMMDDHHmmss).\n */\n\nShipit.getRevision = function(releaseDir) {\n  var shipit = this;\n  var file = path.join(shipit.releasesPath, releaseDir, 'REVISION');\n\n  return shipit.remote('if [ -f ' + file + ' ]; then cat ' + file + ' 2>/dev/null; fi;')\n  .then(function(response) {\n    return response[0].stdout.trim();\n  });\n};\n\nShipit.getPendingCommits = function() {\n  var shipit = this;\n\n  return shipit.getCurrentReleaseDirname()\n  .then(function(currentReleaseDirname) {\n    if (!currentReleaseDirname) {\n      return null;\n    }\n    return shipit.getRevision(currentReleaseDirname)\n    .then(function(deployedRevision) {\n      if (!deployedRevision) {\n        return null;\n      }\n\n      // Get local remotes.\n      return shipit.local('git remote', {cwd: shipit.config.workspace}).then(function(res) {\n        var remotes = res && res.stdout ? res.stdout.split(/\\s/) : [];\n\n        if (remotes.length < 1) {\n          return null;\n        }\n\n        // Compare against currently undeployed revision\n        var compareRevision = remotes[0] + '/' + shipit.config.branch;\n\n        // Print diff\n        return shipit.local('git log --pretty=format:\\\"' + shipit.config.gitLogFormat + '\\\" ' + deployedRevision + '..' + compareRevision, {cwd: shipit.config.workspace})\n        .then(function(response) {\n          response = response.stdout.trim();\n          return response || null;\n        });\n      });\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-shipit-deploy/node_modules/shipit-deploy/tasks/grunt-task.js":"module.exports = function (grunt) {\n  require('./deploy')(grunt);\n  require('./rollback')(grunt);\n  require('./pending')(grunt);\n};\n","/home/travis/build/npmtest/node-npmtest-shipit-deploy/node_modules/shipit-deploy/tasks/deploy/clean.js":"var utils = require('shipit-utils');\n\n/**\n * Clean task.\n * - Remove old releases.\n */\n\nmodule.exports = function (gruntOrShipit) {\n  utils.registerTask(gruntOrShipit, 'deploy:clean', task);\n\n  function task() {\n    var shipit = utils.getShipit(gruntOrShipit);\n\n    return cleanOldReleases()\n    .then(function () {\n      shipit.emit('cleaned');\n    });\n\n    /**\n     * Remove old releases.\n     */\n\n    function cleanOldReleases() {\n      shipit.log('Keeping \"%d\" last releases, cleaning others', shipit.config.keepReleases);\n      var command = '(ls -rd ' + shipit.releasesPath +\n      '/*|head -n ' + shipit.config.keepReleases + ';ls -d ' + shipit.releasesPath +\n      '/*)|sort|uniq -u|xargs rm -rf';\n      return shipit.remote(command);\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-shipit-deploy/node_modules/shipit-deploy/tasks/deploy/fetch.js":"var utils = require('shipit-utils');\nvar chalk = require('chalk');\nvar mkdirp = require('mkdirp');\nvar Promise = require('bluebird');\n\n/**\n * Fetch task.\n * - Create workspace.\n * - Fetch repository.\n * - Checkout commit-ish.\n */\n\nmodule.exports = function (gruntOrShipit) {\n  utils.registerTask(gruntOrShipit, 'deploy:fetch', task);\n\n  function task() {\n    var shipit = utils.getShipit(gruntOrShipit);\n\n    return createWorkspace()\n    .then(initRepository)\n    .then(setGitConfig)\n    .then(addRemote)\n    .then(fetch)\n    .then(checkout)\n    .then(reset)\n    .then(merge)\n    .then(updateSubmodules)\n    .then(function () {\n      shipit.emit('fetched');\n    });\n\n    /**\n     * Create workspace.\n     */\n\n    function createWorkspace() {\n      function create() {\n        shipit.log('Create workspace \"%s\"', shipit.config.workspace);\n        return Promise.promisify(mkdirp)(shipit.config.workspace)\n        .then(function () {\n          shipit.log(chalk.green('Workspace created.'));\n        });\n      }\n\n      if (shipit.config.shallowClone) {\n        shipit.log('Deleting existing workspace \"%s\"', shipit.config.workspace);\n        return shipit.local('rm -rf ' + shipit.config.workspace)\n        .then(create);\n      }\n\n      return create();\n    }\n\n    /**\n     * Initialize repository.\n     */\n\n    function initRepository() {\n      shipit.log('Initialize local repository in \"%s\"', shipit.config.workspace);\n      return shipit.local('git init', {cwd: shipit.config.workspace})\n      .then(function () {\n        shipit.log(chalk.green('Repository initialized.'));\n      });\n    }\n\n    /**\n     * Set git config.\n     */\n\n    function setGitConfig() {\n      if (!shipit.config.gitConfig) {\n        return Promise.resolve();\n      }\n\n      shipit.log('Set custom git config options for \"%s\"', shipit.config.workspace);\n\n      return Promise.all(Object.keys(shipit.config.gitConfig || {}).map(function (key, gitConfig) {\n        return shipit.local(\n          'git config ' + key + ' \"' + shipit.config.gitConfig[key] + '\"',\n          {cwd: shipit.config.workspace}\n        );\n      }))\n      .then(function () {\n        shipit.log(chalk.green('Git config set.'));\n      });\n    }\n\n    /**\n     * Add remote.\n     */\n\n    function addRemote() {\n      shipit.log('List local remotes.');\n\n      // List remotes.\n      return shipit.local('git remote', {cwd: shipit.config.workspace})\n      .then(function (res) {\n        var remotes = res.stdout ? res.stdout.split(/\\s/) : [];\n        var method = remotes.indexOf('shipit') !== -1 ? 'set-url' : 'add';\n\n        shipit.log('Update remote \"%s\" to local repository \"%s\"',\n          shipit.config.repositoryUrl, shipit.config.workspace);\n\n        // Update remote.\n        return shipit.local(\n          'git remote ' + method + ' shipit ' + shipit.config.repositoryUrl,\n          {cwd: shipit.config.workspace}\n        );\n      })\n      .then(function () {\n        shipit.log(chalk.green('Remote updated.'));\n      });\n    }\n\n    /**\n     * Fetch repository.\n     */\n\n    function fetch() {\n      var fetchCommand = 'git fetch shipit --prune';\n      var fetchDepth = shipit.config.shallowClone ? ' --depth=1' : '';\n\n      // fetch branches and tags separate to be compatible with git versions < 1.9\n      fetchCommand += fetchDepth + ' && ' + fetchCommand + ' \"refs/tags/*:refs/tags/*\"';\n\n      shipit.log('Fetching repository \"%s\"', shipit.config.repositoryUrl);\n\n      return shipit.local(\n        fetchCommand,\n        {cwd: shipit.config.workspace}\n      )\n      .then(function () {\n        shipit.log(chalk.green('Repository fetched.'));\n      });\n    }\n\n    /**\n     * Checkout commit-ish.\n     */\n\n    function checkout() {\n      shipit.log('Checking out commit-ish \"%s\"', shipit.config.branch);\n      return shipit.local(\n        'git checkout ' + shipit.config.branch,\n        {cwd: shipit.config.workspace}\n      )\n      .then(function () {\n        shipit.log(chalk.green('Checked out.'));\n      });\n    }\n\n    /**\n     * Hard reset of working tree.\n     */\n\n    function reset() {\n      shipit.log('Resetting the working tree');\n      return shipit.local(\n        'git reset --hard HEAD',\n        {cwd: shipit.config.workspace}\n      )\n      .then(function () {\n        shipit.log(chalk.green('Reset working tree.'));\n      });\n    }\n\n    /**\n     * Merge branch.\n     */\n\n    function merge() {\n      shipit.log('Testing if commit-ish is a branch.');\n\n      // Test if commit-ish is a branch.\n      return shipit.local(\n        'git branch --list ' + shipit.config.branch,\n        {cwd: shipit.config.workspace}\n      )\n      .then(function (res) {\n        var isBranch = !!res.stdout;\n\n        if (!isBranch) {\n          shipit.log(chalk.green('No branch, no merge.'));\n          return;\n        }\n\n        shipit.log('Commit-ish is a branch, merging...');\n\n        // Merge branch.\n        return shipit.local(\n          'git merge shipit/' + shipit.config.branch,\n          {cwd: shipit.config.workspace}\n        );\n      })\n      .then(function () {\n        shipit.log(chalk.green('Branch merged.'));\n      });\n    }\n\n    /**\n     * update submodules\n     */\n\n    function updateSubmodules() {\n\n      if (!shipit.config.updateSubmodules) {\n        return Promise.resolve();\n      }\n\n      shipit.log('Updating submodules.');\n      return shipit.local(\n          'git submodule update --init --recursive',\n          {cwd: shipit.config.workspace}\n          )\n          .then(function () {\n            shipit.log(chalk.green('Submodules updated'));\n          });\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-shipit-deploy/node_modules/shipit-deploy/tasks/deploy/finish.js":"var utils = require('shipit-utils');\nvar init = require('../../lib/init');\n\n/**\n * Update task.\n * - Emit an event \"deployed\".\n */\n\nmodule.exports = function (gruntOrShipit) {\n  utils.registerTask(gruntOrShipit, 'deploy:finish', task);\n\n  function task() {\n    var shipit = init(utils.getShipit(gruntOrShipit));\n    shipit.emit('deployed');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-shipit-deploy/node_modules/shipit-deploy/tasks/deploy/publish.js":"var utils = require('shipit-utils');\nvar chalk = require('chalk');\nvar path = require('path2/posix');\n\n/**\n * Publish task.\n * - Update symbolic link.\n */\n\nmodule.exports = function (gruntOrShipit) {\n  utils.registerTask(gruntOrShipit, 'deploy:publish', task);\n\n  function task() {\n    var shipit = utils.getShipit(gruntOrShipit);\n\n    return updateSymbolicLink()\n    .then(function () {\n      shipit.emit('published');\n    });\n\n    /**\n     * Update symbolic link.\n     */\n\n    function updateSymbolicLink() {\n      shipit.log('Publishing release \"%s\"', shipit.releasePath);\n\n      var relativeReleasePath = path.join('releases', shipit.releaseDirname);\n\n      return shipit.remote('cd ' + shipit.config.deployTo + ' && ln -nfs ' + relativeReleasePath + ' current')\n      .then(function () {\n        shipit.log(chalk.green('Release published.'));\n      });\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-shipit-deploy/node_modules/shipit-deploy/tasks/deploy/update.js":"var utils = require('shipit-utils');\nvar path = require('path2/posix');\nvar moment = require('moment');\nvar chalk = require('chalk');\nvar _ = require('lodash');\nvar util = require('util');\nvar Promise = require('bluebird');\n\n/**\n * Update task.\n * - Set previous release.\n * - Set previous revision.\n * - Create and define release path.\n * - Copy previous release (for faster rsync)\n * - Set current revision and write REVISION file.\n * - Remote copy project.\n */\n\nmodule.exports = function (gruntOrShipit) {\n  utils.registerTask(gruntOrShipit, 'deploy:update', task);\n\n  function task() {\n    var shipit = utils.getShipit(gruntOrShipit);\n    _.assign(shipit.constructor.prototype, require('../../lib/shipit'));\n\n    return setPreviousRelease()\n    .then(setPreviousRevision)\n    .then(createReleasePath)\n    .then(copyPreviousRelease)\n    .then(remoteCopy)\n    .then(setCurrentRevision)\n    .then(function () {\n      shipit.emit('updated');\n    });\n\n    /**\n     * Copy previous release to release dir.\n     */\n\n    function copyPreviousRelease() {\n      var copyParameter = shipit.config.copy || '-a';\n      if (!shipit.previousRelease) {\n        return Promise.resolve();\n      }\n      shipit.log('Copy previous release to \"%s\"', shipit.releasePath);\n      return shipit.remote(util.format('cp %s %s/. %s', copyParameter, path.join(shipit.releasesPath, shipit.previousRelease), shipit.releasePath));\n    }\n\n    /**\n     * Create and define release path.\n     */\n\n    function createReleasePath() {\n      shipit.releaseDirname = moment.utc().format('YYYYMMDDHHmmss');\n      shipit.releasePath = path.join(shipit.releasesPath, shipit.releaseDirname);\n\n      shipit.log('Create release path \"%s\"', shipit.releasePath);\n      return shipit.remote('mkdir -p ' + shipit.releasePath)\n      .then(function () {\n        shipit.log(chalk.green('Release path created.'));\n      });\n    }\n\n    /**\n     * Remote copy project.\n     */\n\n    function remoteCopy() {\n      var options = _.get(shipit.config, 'deploy.remoteCopy') || {rsync: '--del'};\n      var rsyncFrom = shipit.config.rsyncFrom || shipit.config.workspace;\n      var uploadDirPath = path.resolve(rsyncFrom, shipit.config.dirToCopy || '');\n\n      shipit.log('Copy project to remote servers.');\n\n      return shipit.remoteCopy(uploadDirPath + '/', shipit.releasePath, options)\n      .then(function () {\n        shipit.log(chalk.green('Finished copy.'));\n      });\n    }\n\n    /**\n     * Set shipit.previousRevision from remote REVISION file.\n     */\n\n    function setPreviousRevision() {\n      shipit.previousRevision = null;\n\n      if (!shipit.previousRelease) {\n        return Promise.resolve();\n      }\n\n      return shipit.getRevision(shipit.previousRelease)\n      .then(function(revision) {\n\n        if (revision) {\n          shipit.log(chalk.green('Previous revision found.'));\n          shipit.previousRevision = revision;\n        }\n      });\n    }\n\n    /**\n     * Set shipit.previousRelease.\n     */\n\n    function setPreviousRelease() {\n      shipit.previousRelease = null;\n      return shipit.getCurrentReleaseDirname()\n      .then(function(currentReleasseDirname) {\n        if (currentReleasseDirname) {\n          shipit.log(chalk.green('Previous release found.'));\n          shipit.previousRelease = currentReleasseDirname;\n        }\n      });\n    }\n\n    /**\n     * Set shipit.currentRevision and write it to REVISION file.\n     */\n\n    function setCurrentRevision() {\n      shipit.log('Setting current revision and creating revision file.');\n\n      return shipit.local('git rev-parse ' + shipit.config.branch, {cwd: shipit.config.workspace}).then(function(response) {\n        shipit.currentRevision = response.stdout.trim();\n        return shipit.remote('echo \"' + shipit.currentRevision + '\" > ' + path.join(shipit.releasePath, 'REVISION'));\n      }).then(function() {\n        shipit.log(chalk.green('Revision file created.'));\n      });\n    }\n  }\n};\n"}